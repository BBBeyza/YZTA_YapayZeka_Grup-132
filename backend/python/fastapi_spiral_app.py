# fastapi_spiral_app.py

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import numpy as np
from PIL import Image
import tensorflow as tf
import io
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# CORS Middleware (Flutter uygulamasÄ±nÄ±n backend'e eriÅŸebilmesi iÃ§in gerekli)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # GeliÅŸtirme ortamÄ±nda tÃ¼m originlere izin ver
    allow_credentials=True,
    allow_methods=["*"],  # TÃ¼m HTTP metodlarÄ±na izin ver
    allow_headers=["*"],  # TÃ¼m baÅŸlÄ±klara izin ver
)

MODEL_PATH = r"C:\Users\melis\neurograph\frontend\assets\modelsML\denseNet121.tflite"

interpreter = None
input_details = None
output_details = None
MODEL_INPUT_HEIGHT, MODEL_INPUT_WIDTH, MODEL_INPUT_CHANNELS, MODEL_INPUT_DTYPE = None, None, None, None

@app.on_event("startup")
async def startup_event():
    """FastAPI uygulamasÄ± baÅŸlarken TFLite modelini yÃ¼kle."""
    global interpreter, input_details, output_details, \
           MODEL_INPUT_HEIGHT, MODEL_INPUT_WIDTH, MODEL_INPUT_CHANNELS, MODEL_INPUT_DTYPE
    try:
        if not os.path.exists(MODEL_PATH):
            raise FileNotFoundError(f"Model dosyasÄ± bulunamadÄ±: {MODEL_PATH}")

        interpreter = tf.lite.Interpreter(model_path=MODEL_PATH)
        interpreter.allocate_tensors()
        logger.info("TFLite modeli baÅŸarÄ±yla yÃ¼klendi ve tensorler ayrÄ±ldÄ±.")

        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        logger.info(f"Model giriÅŸ detaylarÄ±: {input_details}")
        logger.info(f"Model Ã§Ä±kÄ±ÅŸ detaylarÄ±: {output_details}")

        MODEL_INPUT_HEIGHT = input_details[0]['shape'][1]
        MODEL_INPUT_WIDTH = input_details[0]['shape'][2]
        MODEL_INPUT_CHANNELS = input_details[0]['shape'][3]
        MODEL_INPUT_DTYPE = input_details[0]['dtype'] # Genellikle np.float32

        logger.info(f"Beklenen giriÅŸ boyutu: ({MODEL_INPUT_HEIGHT}, {MODEL_INPUT_WIDTH}, {MODEL_INPUT_CHANNELS})")
        logger.info(f"Beklenen giriÅŸ veri tipi: {MODEL_INPUT_DTYPE}")
    except Exception as e:
        logger.error(f"TFLite modeli yÃ¼klenirken hata oluÅŸtu: {e}")
        interpreter = None


def preprocess_image_for_model(image_bytes: bytes) -> np.ndarray:
    """
    PNG baytlarÄ±nÄ± alÄ±r ve TFLite modeli iÃ§in Ã¶n iÅŸler.
    Modelin (1, 224, 224, 3) ÅŸekilli float32 tensÃ¶rÃ¼ beklediÄŸi varsayÄ±lÄ±r.
    """
    if interpreter is None:
        raise ValueError("Model yÃ¼klenmediÄŸi iÃ§in Ã¶n iÅŸleme yapÄ±lamÄ±yor.")
    if MODEL_INPUT_HEIGHT is None or MODEL_INPUT_WIDTH is None or MODEL_INPUT_CHANNELS is None or MODEL_INPUT_DTYPE is None:
        raise ValueError("Model detaylarÄ± alÄ±namadÄ±ÄŸÄ± iÃ§in Ã¶n iÅŸleme yapÄ±lamÄ±yor.")

    # 1. BaytlarÄ± Pillow Image nesnesine dÃ¶nÃ¼ÅŸtÃ¼r
    img_pil = Image.open(io.BytesIO(image_bytes))

    # 2. GÃ¶rÃ¼ntÃ¼yÃ¼ RGB'ye dÃ¶nÃ¼ÅŸtÃ¼r (model RGB beklediÄŸi iÃ§in)
    if img_pil.mode != 'RGB':
        img_pil = img_pil.convert('RGB')

    # 3. GÃ¶rÃ¼ntÃ¼yÃ¼ modelin beklediÄŸi boyuta yeniden boyutlandÄ±r
    img_pil = img_pil.resize((MODEL_INPUT_WIDTH, MODEL_INPUT_HEIGHT), Image.Resampling.LANCZOS) # YÃ¼ksek kaliteli yeniden boyutlandÄ±rma

    # 4. GÃ¶rÃ¼ntÃ¼yÃ¼ NumPy dizisine Ã§evir ve veri tipini float32 olarak ayarla
    img_array = np.array(img_pil, dtype=MODEL_INPUT_DTYPE) # Modelin beklediÄŸi dtype'Ä± kullan

    # 5. Piksel deÄŸerlerini 0.0-1.0 arasÄ±na normalize et
    img_array = img_array / 255.0

    # 6. Modelin beklediÄŸi ÅŸekle getir: (1, HEIGHT, WIDTH, CHANNELS)
    img_array = np.expand_dims(img_array, axis=0)

    logger.info(f"Ã–n iÅŸlenmiÅŸ gÃ¶rÃ¼ntÃ¼ ÅŸekli: {img_array.shape}, veri tipi: {img_array.dtype}")
    return img_array

@app.post("/predict_tremor")
async def predict_tremor(image: UploadFile = File(...)): # Flutter'dan gelen 'image' alanÄ±
    if interpreter is None:
        raise HTTPException(status_code=500, detail="ML modeli backend'de yÃ¼klenemedi.")

    if not image.filename.endswith('.png'):
        raise HTTPException(status_code=400, detail="Sadece PNG dosyalarÄ± kabul edilir.")

    image_bytes = await image.read()

    try:
        processed_tensor = preprocess_image_for_model(image_bytes)

        # GiriÅŸ tensÃ¶rÃ¼nÃ¼ ayarla
        interpreter.set_tensor(input_details[0]['index'], processed_tensor)

        # Ã‡Ä±karÄ±mÄ± Ã§alÄ±ÅŸtÄ±r
        interpreter.invoke()

        # Ã‡Ä±kÄ±ÅŸ tensÃ¶rÃ¼nÃ¼ al (Softmax sonrasÄ± 2 sÄ±nÄ±f olasÄ±lÄ±ÄŸÄ±: [control_prob, patient_prob])
        output_data = interpreter.get_tensor(output_details[0]['index'])[0]

        control_probability = float(output_data[0]) # 'SpiralControl' olasÄ±lÄ±ÄŸÄ±
        patients_probability = float(output_data[1]) # 'SpiralPatients' olasÄ±lÄ±ÄŸÄ±

        logger.info(f"Kontrol OlasÄ±lÄ±ÄŸÄ±: {control_probability:.4f}, Hasta OlasÄ±lÄ±ÄŸÄ±: {patients_probability:.4f}")

        # Tahmin sonucunu belirle ve JSON olarak dÃ¶ndÃ¼r
        return JSONResponse(content={
            "control_probability": control_probability,
            "patients_probability": patients_probability,
            # Flutter'da direkt kullanÄ±labilecek metin
            "prediction_text_summary": "ğŸŸ¡ Titreme AlgÄ±landÄ± â€” GÃ¼ven: " + \
                                      f"{patients_probability:.2f}" if patients_probability > control_probability else \
                                      "âœ… Temiz YazÄ±m â€” GÃ¼ven: " + \
                                      f"{control_probability:.2f}"
        }, status_code=200)

    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"GÃ¶rÃ¼ntÃ¼ iÅŸleme veya tahmin sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Sunucu hatasÄ±: {str(e)}")

# Uvicorn sunucusunu baÅŸlatmak iÃ§in ana kÄ±sÄ±m
if __name__ == '__main__':
    import uvicorn
    # FastAPI uygulamayÄ± 'app' deÄŸiÅŸkeninde tuttuÄŸumuz iÃ§in 'app:app' kullanÄ±rÄ±z.
    # reload=True geliÅŸtirme sÄ±rasÄ±nda kod deÄŸiÅŸikliklerinde otomatik yeniden yÃ¼kleme saÄŸlar.
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)