import 'package:flutter/material.dart';
import 'package:neurograph/widgets/drawing_canvas.dart';
import 'package:neurograph/models/stroke.dart'; // Bu modelin var olduÄŸunu varsayÄ±yorum
import 'package:neurograph/services/gemini_service.dart'; // Bu servisin var olduÄŸunu varsayÄ±yorum
import 'dart:typed_data';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:http_parser/http_parser.dart'; // MediaType iÃ§in

// --- InstructionSection Widget ---
class InstructionSection extends StatelessWidget {
  final String title;
  final String instruction;
  const InstructionSection({
    super.key,
    required this.title,
    required this.instruction,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 20.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            instruction,
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              color: Theme.of(context).colorScheme.onSurfaceVariant,
              fontSize: 16,
            ),
            textAlign: TextAlign.start,
          ),
        ],
      ),
    );
  }
}

// --- DrawingTestButtons Widget ---
class DrawingTestButtons extends StatelessWidget {
  final VoidCallback onSave;
  final VoidCallback onFinish;
  const DrawingTestButtons({
    super.key,
    required this.onSave,
    required this.onFinish,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          Expanded(
            child: ElevatedButton(
              onPressed: onSave,
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.secondary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                elevation: 5,
              ),
              child: const Text(
                'Ã‡izimi Kaydet',
                style: TextStyle(fontSize: 16),
              ),
            ),
          ),
          const SizedBox(width: 15),
          Expanded(
            child: ElevatedButton(
              onPressed: onFinish,
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                elevation: 5,
              ),
              child: const Text('Testi Bitir', style: TextStyle(fontSize: 16)),
            ),
          ),
        ],
      ),
    );
  }
}

// --- DrawingTestScreen Class ---
class DrawingTestScreen extends StatefulWidget {
  final String testKey; // 'spiral' veya 'meander'
  final String testTitle;
  final String testInstruction;

  const DrawingTestScreen({
    super.key,
    required this.testKey,
    required this.testTitle,
    required this.testInstruction,
  });

  @override
  State<DrawingTestScreen> createState() => _DrawingTestScreenState();
}

class _DrawingTestScreenState extends State<DrawingTestScreen> {
  final GlobalKey<DrawingCanvasState> _canvasKey = GlobalKey();
  final GeminiService _geminiService = GeminiService();

  bool _isLoading = false;

  // Backend URL'sini testKey'e gÃ¶re dinamik olarak belirle
  String get _backendUrl {
    const String baseUrl = 'http://192.168.1.160:8000'; // Backend'inizin ana URL'si
    if (widget.testKey == 'spiral') {
      // Spiral testi iÃ§in backend endpoint'i
      return '$baseUrl/spiral/predict_tremor'; 
    } else if (widget.testKey == 'meander') {
      // Meander testi iÃ§in backend endpoint'i
      return '$baseUrl/meander/predict_meander_tremor';
    }
    // Bilinmeyen bir testKey gelirse varsayÄ±lan veya hata durumu
    print('Hata: Bilinmeyen testKey: ${widget.testKey}');
    return '$baseUrl/spiral/predict_tremor'; // VarsayÄ±lan olarak spiral endpoint'ini kullan
  }
  
  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  void _saveCurrentDrawing() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('${widget.testTitle} Ã§izimi kaydedildi.')),
    );
  }

  Future<void> _finishTest() async {
    setState(() {
      _isLoading = true;
    });

    Uint8List? drawingImageBytes;
    try {
      drawingImageBytes = await _canvasKey.currentState
          ?.exportDrawingAsPngBytes();
      if (drawingImageBytes == null || drawingImageBytes.isEmpty) {
        setState(() {
          _isLoading = false;
        });
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
              'HiÃ§ Ã§izim verisi bulunamadÄ± veya resim oluÅŸturulamadÄ±!',
            ),
          ),
        );
        return;
      }

      // Hata AyÄ±klama: Orijinal Ã§izim baytlarÄ±nÄ± dosyaya kaydet (isteÄŸe baÄŸlÄ±)
      final directory = await getApplicationDocumentsDirectory();
      final originalFilePath =
          '${directory.path}/original_drawing_${widget.testKey}_${DateTime.now().millisecondsSinceEpoch}.png';
      final originalFile = File(originalFilePath);
      await originalFile.writeAsBytes(drawingImageBytes);
      print('Orijinal Ã§izim kaydedildi: $originalFilePath');
    } catch (e) {
      print('Ã‡izim resmi dÄ±ÅŸa aktarÄ±lÄ±rken hata: $e');
      drawingImageBytes = null;
      setState(() {
        _isLoading = false;
      });
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Ã‡izim resmi dÄ±ÅŸa aktarÄ±lÄ±rken hata oluÅŸtu: $e'),
        ),
      );
      return;
    }

    String tremorClassificationResult = "Tremor analizi yapÄ±lamadÄ±.";
    try {
      // Ã‡izim PNG baytlarÄ±nÄ± backend sunucusuna gÃ¶nder
      var request = http.MultipartRequest('POST', Uri.parse(_backendUrl));
      request.files.add(
        http.MultipartFile.fromBytes(
          'image', // Backend'de beklenen alan adÄ± (FastAPI'de File(...) veya Form(...))
          drawingImageBytes,
          filename: 'drawing.png',
          contentType: MediaType('image', 'png'), // http_parser'dan MediaType
        ),
      );

      var response = await request.send();

      if (response.statusCode == 200) {
        String responseBody = await response.stream.bytesToString();
        print('Backend yanÄ±tÄ±: $responseBody');

        try {
          final Map<String, dynamic> jsonResponse = json.decode(responseBody);
          // Backend'den gelen tahminin JSON formatÄ±na gÃ¶re key isimlerini ayarlayÄ±n
          final double controlProbability = jsonResponse['control_probability'];
          final double patientsProbability =
              jsonResponse['patients_probability'];

          if (patientsProbability > controlProbability) {
            tremorClassificationResult =
                "ðŸŸ¡ Titreme AlgÄ±landÄ± â€” GÃ¼ven: ${patientsProbability.toStringAsFixed(2)}";
          } else {
            tremorClassificationResult =
                "âœ… Temiz YazÄ±m â€” GÃ¼ven: ${controlProbability.toStringAsFixed(2)}";
          }
        } catch (e) {
          tremorClassificationResult =
              "Backend yanÄ±tÄ± iÅŸlenirken hata: $e. YanÄ±t: $responseBody";
        }
      } else {
        tremorClassificationResult =
            "Backend hatasÄ±: ${response.statusCode} - ${await response.stream.bytesToString()}";
      }
    } catch (e) {
      print('Backend ile iletiÅŸim hatasÄ±: $e');
      tremorClassificationResult = "Backend ile iletiÅŸim hatasÄ±: $e";
    } finally {
      setState(() {
        _isLoading = false;
      });
    }

    // Gemini'ye nihai raporlama prompt'unu gÃ¶nder (ML sonucuyla birlikte)
    final prompt =
        '''
KullanÄ±cÄ±nÄ±n yaptÄ±ÄŸÄ± "${widget.testTitle}" adlÄ± ${widget.testKey} Ã§izim testinin sonuÃ§larÄ±nÄ± deÄŸerlendirir misin?
Test TalimatÄ±: "${widget.testInstruction}"
Cihaz Ã¼zerindeki ML modelinden gelen tremor sÄ±nÄ±flandÄ±rma sonucu (backend'den): "$tremorClassificationResult"

Bu bilgilere dayanarak, Ã§izimin genel tremor durumunu ve varsa potansiyel anomalileri kullanÄ±cÄ±ya anlaÅŸÄ±lÄ±r bir dille raporla. Bilimsel terimlerden kaÃ§Ä±n, nazik ve destekleyici ol. Sadece verilen bilgilere odaklan, Ã§izim hakkÄ±nda doÄŸrudan gÃ¶rsel yorum yapma.
''';
    final evaluation = await _geminiService.askGemini(prompt);

    if (!mounted) return;
    Navigator.pop(context);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('${widget.testTitle} DeÄŸerlendirme Raporu'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'ML Model Analizi: $tremorClassificationResult',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 20),
              const Text(
                'Genel DeÄŸerlendirme (Gemini):',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text(evaluation),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.testTitle),
        centerTitle: true,
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                InstructionSection(
                  title: widget.testTitle,
                  instruction: widget.testInstruction,
                ),
                Expanded(child: DrawingCanvas(key: _canvasKey)),
                DrawingTestButtons(
                  onSave: _saveCurrentDrawing,
                  onFinish: _finishTest,
                ),
              ],
            ),
    );
  }
}
