import 'package:flutter/material.dart';
import 'package:neurograph/widgets/drawing_canvas.dart';
import 'package:neurograph/models/stroke.dart';
import 'package:neurograph/services/gemini_service.dart';
import 'dart:typed_data';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:http_parser/http_parser.dart'; // MediaType i√ßin

class InstructionSection extends StatelessWidget {
  final String title;
  final String instruction;
  const InstructionSection({
    super.key,
    required this.title,
    required this.instruction,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 20.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            instruction,
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              color: Theme.of(context).colorScheme.onSurfaceVariant,
              fontSize: 16,
            ),
            textAlign: TextAlign.start,
          ),
        ],
      ),
    );
  }
}

class DrawingTestButtons extends StatelessWidget {
  final VoidCallback onSave;
  final VoidCallback onFinish;
  const DrawingTestButtons({
    super.key,
    required this.onSave,
    required this.onFinish,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          Expanded(
            child: ElevatedButton(
              onPressed: onSave,
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.secondary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                elevation: 5,
              ),
              child: const Text(
                '√áizimi Kaydet',
                style: TextStyle(fontSize: 16),
              ),
            ),
          ),
          const SizedBox(width: 15),
          Expanded(
            child: ElevatedButton(
              onPressed: onFinish,
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                elevation: 5,
              ),
              child: const Text('Testi Bitir', style: TextStyle(fontSize: 16)),
            ),
          ),
        ],
      ),
    );
  }
}

class DrawingTestScreen extends StatefulWidget {
  final String testKey; // 'spiral', 'meander', 'clock' veya 'handwriting'
  final String testTitle;
  final String testInstruction;

  const DrawingTestScreen({
    super.key,
    required this.testKey,
    required this.testTitle,
    required this.testInstruction,
  });

  @override
  State<DrawingTestScreen> createState() => _DrawingTestScreenState();
}

class _DrawingTestScreenState extends State<DrawingTestScreen> {
  final GlobalKey<DrawingCanvasState> _canvasKey = GlobalKey();
  final GeminiService _geminiService = GeminiService();

  bool _isLoading = false;

  String get _backendUrl {
    const String baseUrl = 'http://192.168.1.160:8000';
    if (widget.testKey == 'spiral') {
      return '$baseUrl/spiral/predict_tremor';
    } else if (widget.testKey == 'meander') {
      return '$baseUrl/meander/predict_meander_tremor';
    } else if (widget.testKey == 'clock') {
      return '$baseUrl/clock/predict_clock_drawing_score';
    } else if (widget.testKey == 'handwriting') {
      return '$baseUrl/handwriting/analyze_handwriting'; 
    }
    print('Hata: Bilinmeyen testKey: ${widget.testKey}');
    return '$baseUrl/spiral/predict_tremor';
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  void _saveCurrentDrawing() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('${widget.testTitle} √ßizimi kaydedildi.')),
    );
  }

  Future<void> _finishTest() async {
    setState(() {
      _isLoading = true;
    });

    Uint8List? drawingImageBytes;
    try {
      drawingImageBytes = await _canvasKey.currentState
          ?.exportDrawingAsPngBytes();
      if (drawingImageBytes == null || drawingImageBytes.isEmpty) {
        setState(() {
          _isLoading = false;
        });
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
              'Hi√ß √ßizim verisi bulunamadƒ± veya resim olu≈üturulamadƒ±!',
            ),
          ),
        );
        return;
      }
    } catch (e) {
      print('√áizim resmi dƒ±≈üa aktarƒ±lƒ±rken hata: $e');
      drawingImageBytes = null;
      setState(() {
        _isLoading = false;
      });
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('√áizim resmi dƒ±≈üa aktarƒ±lƒ±rken hata olu≈ütu: $e'),
        ),
      );
      return;
    }

    String classificationResult = "Analiz yapƒ±lamadƒ±.";
    try {
      var request = http.MultipartRequest('POST', Uri.parse(_backendUrl));
      request.files.add(
        http.MultipartFile.fromBytes(
          'image', 
          drawingImageBytes,
          filename: 'drawing.png',
          contentType: MediaType('image', 'png'),
        ),
      );

      var response = await request.send();

      if (response.statusCode == 200) {
        String responseBody = await response.stream.bytesToString();
        print('Backend yanƒ±tƒ±: $responseBody');

        try {
          final Map<String, dynamic> jsonResponse = json.decode(responseBody);

          if (widget.testKey == 'clock') {
            final int shulmanScore = jsonResponse['shulman_score'];
            final double confidence = jsonResponse['confidence'];
            classificationResult =
                "Shulman Puanƒ±: $shulmanScore (G√ºven: ${confidence.toStringAsFixed(2)})";
          } else if (widget.testKey == 'spiral' || widget.testKey == 'meander') {
            final double controlProbability = jsonResponse['control_probability'];
            final double patientsProbability = jsonResponse['patients_probability'];
            if (patientsProbability > controlProbability) {
              classificationResult =
                  "üü° Titreme Algƒ±landƒ± ‚Äî G√ºven: ${patientsProbability.toStringAsFixed(2)}";
            } else {
              classificationResult =
                  "‚úÖ Temiz √áizim ‚Äî G√ºven: ${controlProbability.toStringAsFixed(2)}";
            }
          } else if (widget.testKey == 'handwriting') {
            final List<dynamic> lineResults = jsonResponse['line_analysis_results'];
            if (lineResults.isNotEmpty) {
              // Enhanced handwriting analysis results
              final double overallQuality = jsonResponse['overall_quality_score'] ?? 0.0;
              final String qualityLevel = jsonResponse['overall_handwriting_quality'] ?? 'unknown';
              final double micrographyScore = jsonResponse['overall_micrography_score'] ?? 0.0;
              final String micrographySeverity = jsonResponse['micrography_severity'] ?? 'none';
                             final double sizeConsistency = jsonResponse['size_consistency_score'] ?? 0.0;
               final double alignmentQuality = jsonResponse['alignment_quality_score'] ?? 0.0;
               final double spacingRegularity = jsonResponse['spacing_regularity_score'] ?? 0.0;
               final double baselineStability = jsonResponse['baseline_stability_score'] ?? 0.0;
               
                               // Canvas size analysis - only show warnings for extreme cases
                String canvasSizeNote = "";
                if (lineResults.isNotEmpty) {
                  final firstLine = lineResults.first;
                  final canvasAnalysis = firstLine['canvas_size_analysis'] ?? 'normal';
                  switch (canvasAnalysis) {
                    case 'characters_too_small':
                      canvasSizeNote = "üí° Harfler √ßok k√º√ß√ºk - daha b√ºy√ºk yazmayƒ± deneyin";
                      break;
                    case 'characters_too_large':
                      canvasSizeNote = "üí° Harfler √ßok b√ºy√ºk - daha k√º√ß√ºk yazmayƒ± deneyin";
                      break;
                    case 'optimal_size':
                    default:
                      canvasSizeNote = ""; // Don't show anything for optimal size
                  }
                }
              
              String qualityEmoji = "‚úÖ";
              if (qualityLevel == "poor") qualityEmoji = "‚ùå";
              else if (qualityLevel == "fair") qualityEmoji = "‚ö†Ô∏è";
              else if (qualityLevel == "good") qualityEmoji = "‚úÖ";
              
              String micrographyEmoji = "";
              if (micrographySeverity == "severe") micrographyEmoji = "üî¥";
              else if (micrographySeverity == "moderate") micrographyEmoji = "üü°";
              else if (micrographySeverity == "mild") micrographyEmoji = "üü†";
              else micrographyEmoji = "‚úÖ";
              
                             classificationResult =
                   "$qualityEmoji Metin Kalitesi: ${qualityLevel.toUpperCase()}\n"
                   "$micrographyEmoji Mikrografi: ${micrographySeverity.toUpperCase()} (${micrographyScore.toStringAsFixed(2)})\n"
                   "üìä Medyan harf y√ºksekliƒüinden %40 farklƒ± olan harfler: ${(micrographyScore * 100).toStringAsFixed(0)}%\n"
                   "$canvasSizeNote";
            } else {
              classificationResult = "El yazƒ±sƒ± tespit edilemedi.";
            }
          }

        } on FormatException catch (e) {
          classificationResult =
              "Backend yanƒ±tƒ± i≈ülenirken hata: Yanƒ±t bir JSON deƒüil. Hata: $e";
        } catch (e) {
          classificationResult =
              "Backend yanƒ±tƒ± i≈ülenirken beklenmeyen hata: $e";
        }
      } else {
        String errorBody = await response.stream.bytesToString();
        classificationResult =
            "Backend hatasƒ±: ${response.statusCode} - $errorBody";
        print("Backend Hata Yanƒ±tƒ±: $errorBody");
      }
    } catch (e) {
      print('Backend ile ileti≈üim hatasƒ±: $e');
      classificationResult = "Backend ile ileti≈üim hatasƒ±: $e";
    } finally {
      setState(() {
        _isLoading = false;
      });
    }

    final prompt =
        '''
Kullanƒ±cƒ±nƒ±n yaptƒ±ƒüƒ± "${widget.testTitle}" adlƒ± ${widget.testKey} √ßizim testinin sonu√ßlarƒ±nƒ± deƒüerlendirir misin?
Test Talimatƒ±: "${widget.testInstruction}"
Cihaz √ºzerindeki ML modelinden gelen analiz sonucu (backend'den): "$classificationResult"

Bu bilgilere dayanarak, √ßizimin genel durumunu ve varsa potansiyel anomalileri kullanƒ±cƒ±ya anla≈üƒ±lƒ±r bir dille kƒ±sa bir ≈üekilde raporla. Bilimsel terimlerden ka√ßƒ±n, nazik ve destekleyici ol. Sadece verilen bilgilere odaklan, √ßizim hakkƒ±nda doƒürudan g√∂rsel yorum yapma. Y√ºzdelik olarak skorunu belirt ve kullanƒ±cƒ±ya √ßizimlerini geli≈ütirmesi i√ßin √∂nerilerde bulun. Eƒüer √ßizim temizse, bunu da belirt.
''';
    final evaluation = await _geminiService.askGemini(prompt);

    if (!mounted) return;
    Navigator.pop(context);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('${widget.testTitle} Deƒüerlendirme Raporu'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              const SizedBox(height: 20),
              Text(evaluation),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.testTitle),
        centerTitle: true,
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                InstructionSection(
                  title: widget.testTitle,
                  instruction: widget.testInstruction,
                ),
                Expanded(
                  child: DrawingCanvas(
                    key: _canvasKey,
                  ),
                ),
                DrawingTestButtons(
                  onSave: _saveCurrentDrawing,
                  onFinish: _finishTest,
                ),
              ],
            ),
    );
  }
}
