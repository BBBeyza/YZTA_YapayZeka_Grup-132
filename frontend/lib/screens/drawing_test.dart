// main imports
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'dart:convert';
import 'dart:async';

// firebase imports
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

// project imports
import 'package:neurograph/widgets/drawing_canvas.dart';
import 'package:neurograph/models/stroke.dart'; // Bu import kullanÄ±lmÄ±yorsa kaldÄ±rÄ±labilir
import 'package:neurograph/services/gemini_service.dart';
import '../models/report_model.dart';
// import '../screens/reports_screen.dart'; // Bu import artÄ±k gerekli deÄŸil

//------------------------------------------------------------------
// Sabit Widget'lar (DeÄŸiÅŸiklik Gerekmiyor)
//------------------------------------------------------------------

class InstructionSection extends StatelessWidget {
  final String title;
  final String instruction;
  const InstructionSection({
    super.key,
    required this.title,
    required this.instruction,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 20.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            instruction,
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                  fontSize: 16,
                ),
            textAlign: TextAlign.start,
          ),
        ],
      ),
    );
  }
}

class DrawingTestButtons extends StatelessWidget {
  final VoidCallback onSave;
  final VoidCallback onFinish;
  const DrawingTestButtons({
    super.key,
    required this.onSave,
    required this.onFinish,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          Expanded(
            child: ElevatedButton(
              onPressed: onSave,
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.secondary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                elevation: 5,
              ),
              child: const Text(
                'Ã‡izimi Kaydet',
                style: TextStyle(fontSize: 16),
              ),
            ),
          ),
          const SizedBox(width: 15),
          Expanded(
            child: ElevatedButton(
              onPressed: onFinish,
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                elevation: 5,
              ),
              child: const Text('Testi Bitir', style: TextStyle(fontSize: 16)),
            ),
          ),
        ],
      ),
    );
  }
}

//------------------------------------------------------------------
// Ana Ekran Widget'Ä± (DÃ¼zenlenmiÅŸ Hali)
//------------------------------------------------------------------

class DrawingTestScreen extends StatefulWidget {
  final String testKey;
  final String testTitle;
  final String testInstruction;

  const DrawingTestScreen({
    super.key,
    required this.testKey,
    required this.testTitle,
    required this.testInstruction,
  });

  @override
  State<DrawingTestScreen> createState() => _DrawingTestScreenState();
}

class _DrawingTestScreenState extends State<DrawingTestScreen> {
  final GlobalKey<DrawingCanvasState> _canvasKey = GlobalKey();
  final GeminiService _geminiService = GeminiService();
  bool _isLoading = false;

  /// Backend URL'sini test anahtarÄ±na gÃ¶re dinamik olarak dÃ¶ndÃ¼rÃ¼r.
  String get _backendUrl {
    // TODO: IP adresini kendi yerel IP adresinizle veya sunucu adresinizle deÄŸiÅŸtirin.
    const String baseUrl = 'http://192.168.1.160:8000'; 
    switch (widget.testKey) {
      case 'spiral':
        return '$baseUrl/spiral/predict_tremor';
      case 'meander':
        return '$baseUrl/meander/predict_meander_tremor';
      case 'clock':
        return '$baseUrl/clock/predict_clock_drawing_score';
      case 'handwriting':
        return '$baseUrl/handwriting/analyze_handwriting';
      default:
        // VarsayÄ±lan bir uÃ§ nokta veya hata yÃ¶netimi
        print('Hata: Bilinmeyen testKey: ${widget.testKey}');
        return '$baseUrl/spiral/predict_tremor';
    }
  }

  /// GeÃ§ici olarak Ã§izimi kaydettiÄŸini belirten bir mesaj gÃ¶sterir.
  void _saveCurrentDrawing() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('${widget.testTitle} Ã§izimi kaydedildi.')),
    );
  }

  /// "Testi Bitir" butonuna basÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸan ana sÃ¼reÃ§.
  Future<void> _finishTest() async {
    if (!mounted) return;

    setState(() => _isLoading = true);

    try {
      // 1. Ã‡izimi resim verisi (bytes) olarak al
      final drawingImageBytes = await _canvasKey.currentState?.exportDrawingAsPngBytes();
      if (drawingImageBytes == null || drawingImageBytes.isEmpty) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('LÃ¼tfen bir Ã§izim yapÄ±n!')),
        );
        setState(() => _isLoading = false);
        return;
      }

      // 2. Ã‡izimi backend'e gÃ¶nderip analiz sonucunu al
      final analysisResult = await _analyzeDrawing(drawingImageBytes);

      // 3. Analiz sonucunu Gemini'ye gÃ¶nderip kullanÄ±cÄ± dostu bir deÄŸerlendirme al
      final evaluation = await _getGeminiEvaluation(analysisResult);

      // 4. Test raporunu veritabanÄ±na kaydet
      await _saveTestReport(analysisResult, evaluation);

      // 5. Sonucu diyalogda gÃ¶ster. KullanÄ±cÄ± "Tamam" dediÄŸinde ekran kapanacak.
      if (mounted) {
        await _showEvaluationResult(evaluation);
      }

    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Bir hata oluÅŸtu: ${e.toString()}')),
      );
    } finally {
      // Hata durumunda veya sÃ¼reÃ§ normalden farklÄ± biterse loading indicator'Ä± kapat
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  /// Ã‡izim verisini backend'e gÃ¶nderir ve ham analiz sonucunu dÃ¶ndÃ¼rÃ¼r.
/// Ã‡izim verisini backend'e gÃ¶nderir ve ham analiz sonucunu dÃ¶ndÃ¼rÃ¼r.
  Future<String> _analyzeDrawing(Uint8List drawingImageBytes) async {
    final request = http.MultipartRequest('POST', Uri.parse(_backendUrl));
    request.files.add(
      http.MultipartFile.fromBytes(
        'image',
        drawingImageBytes,
        filename: '${widget.testKey}_drawing.png',
        contentType: MediaType('image', 'png'),
      ),
    );

    final response = await request.send().timeout(const Duration(seconds: 30));
    final responseBody = await response.stream.bytesToString();

    if (response.statusCode != 200) {
      throw Exception('Backend hatasÄ±: ${response.statusCode} - $responseBody');
    }

    final jsonResponse = json.decode(responseBody) as Map<String, dynamic>;

    // Analiz sonucunu test tÃ¼rÃ¼ne gÃ¶re formatla
    switch (widget.testKey) {
      case 'clock':
        return "Shulman PuanÄ±: ${jsonResponse['shulman_score']} "
            "(GÃ¼ven: ${(jsonResponse['confidence'] as double).toStringAsFixed(2)})";
      case 'spiral':
      case 'meander':
        final controlProb = jsonResponse['control_probability'] as double;
        final patientProb = jsonResponse['patients_probability'] as double;
        return patientProb > controlProb
            ? "ğŸŸ¡ Titreme AlgÄ±landÄ± â€” GÃ¼ven: ${patientProb.toStringAsFixed(2)}"
            : "âœ… Temiz Ã‡izim â€” GÃ¼ven: ${controlProb.toStringAsFixed(2)}";
      case 'handwriting':
        // El yazÄ±sÄ± testi iÃ§in teknik detaylarÄ± gizle - sadece genel durum bilgisi
        return "El yazÄ±sÄ± analizi tamamlandÄ±";
      default:
        return "Test sonucu: ${jsonResponse.toString()}";
    }
  }

  /// Ham analiz sonucunu alÄ±p Gemini'den bir deÄŸerlendirme metni ister.
  Future<String> _getGeminiEvaluation(String analysisResult) async {
    String prompt;
    
    if (widget.testKey == 'handwriting') {
      // El yazÄ±sÄ± testi iÃ§in Ã¶zel prompt - teknik sonuÃ§larÄ± kullanma
      prompt = '''
KullanÄ±cÄ±nÄ±n yaptÄ±ÄŸÄ± el yazÄ±sÄ± testini deÄŸerlendirir misin? El yazÄ±sÄ±nÄ±n genel okunabilirliÄŸi, dÃ¼zenliliÄŸi ve akÄ±cÄ±lÄ±ÄŸÄ± hakkÄ±nda genel bir deÄŸerlendirme yap. 

Test TalimatÄ±: "${widget.testInstruction}"

Bu el yazÄ±sÄ± testine dayanarak:
- YazÄ±nÄ±n genel okunabilirliÄŸi
- Harflerin dÃ¼zenliliÄŸi
- YazÄ± akÄ±cÄ±lÄ±ÄŸÄ±
- Genel motor beceri durumu

konularÄ±nda kullanÄ±cÄ±ya anlaÅŸÄ±lÄ±r, pozitif ve kÄ±sa bir deÄŸerlendirme raporla. Teknik puanlardan veya sayÄ±sal deÄŸerlerden bahsetme.
''';
    } else {
      // DiÄŸer testler iÃ§in mevcut prompt
      prompt = '''
KullanÄ±cÄ±nÄ±n yaptÄ±ÄŸÄ± "${widget.testTitle}" adlÄ± Ã§izim testinin sonuÃ§larÄ±nÄ± deÄŸerlendirir misin? EÄŸer gelen test saat Ã§izimi ise Shulman puanÄ±nÄ± kullanarak deÄŸerlendirme yap. Spiral ve meander testleri iÃ§in ise titreme olasÄ±lÄ±klarÄ±nÄ± kullanarak bir deÄŸerlendirme yap. El yazÄ±sÄ± testi iÃ§in ise el yazÄ±sÄ±nÄ±n genel durumunu deÄŸerlendir diÄŸer test tÃ¼rlerinden ve puanlamasÄ±ndan bahsetme. 
Test TalimatÄ±: "${widget.testInstruction}"
Analiz Sonucu: "$analysisResult"

Bu bilgilere dayanarak, Ã§izimin genel durumunu ve varsa potansiyel anomalileri kullanÄ±cÄ±ya anlaÅŸÄ±lÄ±r, kÄ±sa ve tÄ±bbi olmayan bir dille raporla.
''';
    }
    
    return await _geminiService.askGemini(prompt);
  }
  
  /// Analiz ve deÄŸerlendirme sonuÃ§larÄ±nÄ± iÃ§eren raporu Firestore'a kaydeder.
  Future<void> _saveTestReport(String analysisResult, String evaluation) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception('KullanÄ±cÄ± giriÅŸ yapmamÄ±ÅŸ');

      String reportContent;
      
      if (widget.testKey == 'handwriting') {
        // El yazÄ±sÄ± testi iÃ§in sadece deÄŸerlendirmeyi kaydet
        reportContent = evaluation;
      } else {
        // DiÄŸer testler iÃ§in hem analiz hem deÄŸerlendirme
        reportContent = '''
Test TÃ¼rÃ¼: ${widget.testKey.toUpperCase()}
Analiz Sonucu: $analysisResult
DeÄŸerlendirme: $evaluation
''';
      }

      final report = Report(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        title: '${widget.testTitle} Test Raporu',
        content: reportContent,
        date: DateTime.now(),
        type: 'drawing',
        userId: user.uid,
      );

      await FirebaseFirestore.instance
          .collection('reports')
          .doc(report.id)
          .set(report.toMap());
    } catch (e) {
      // Hata olsa bile sÃ¼reÃ§ devam etmeli, sadece konsola yazdÄ±r.
      print('Rapor kaydedilirken hata: $e');
      // Ä°steÄŸe baÄŸlÄ± olarak kullanÄ±cÄ±ya bir uyarÄ± gÃ¶sterebilirsiniz.
      // throw Exception('Rapor kaydedilemedi: $e');
    }
  }

  /// DeÄŸerlendirme sonucunu gÃ¶steren ve kapatÄ±ldÄ±ÄŸÄ±nda bir Ã¶nceki ekrana dÃ¶nen diyalogu aÃ§ar.
  Future<void> _showEvaluationResult(String evaluation) async {
    if (!mounted) return;
    await showDialog(
      context: context,
      barrierDismissible: false, // DÄ±ÅŸarÄ± tÄ±klayarak kapatmayÄ± engelle
      builder: (dialogContext) => AlertDialog(
        title: Text('${widget.testTitle} DeÄŸerlendirme Raporu'),
        content: SingleChildScrollView(child: Text(evaluation)),
        actions: [
          TextButton(
            onPressed: () {
              // Ä°lk pop diyalogu kapatÄ±r.
              Navigator.of(dialogContext).pop(); 
              // Ä°kinci pop Ã§izim ekranÄ±nÄ± (DrawingTestScreen) kapatÄ±r.
              Navigator.of(context).pop(); 
            },
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.testTitle),
        centerTitle: true,
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                InstructionSection(
                  title: widget.testTitle,
                  instruction: widget.testInstruction,
                ),
                Expanded(child: DrawingCanvas(key: _canvasKey)),
                DrawingTestButtons(
                  onSave: _saveCurrentDrawing,
                  onFinish: _finishTest,
                ),
              ],
            ),
    );
  }
}